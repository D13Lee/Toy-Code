#BlueJ class context
comment0.target=Pather
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Pather\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=void\ main()
comment10.params=g
comment10.target=int[][]\ graphToIntegerMatrix(Graph)
comment10.text=\r\n\ with\ a\ matrix\ initialized\ at\ 1(wall)\ for\ all\ values,\ iterate\ through\ a\ graph\ and\ replace\ coordinates\ with\ true\ values\ from\ graph\r\n
comment11.params=g
comment11.target=java.lang.String\ findRange(Graph)
comment11.text=\r\n\ return\ a\ string\ that\ contains\ the\ dimensions\ that\ the\ graph\ occupies\ separated\ by\ a\ '-'\r\n
comment12.params=g
comment12.target=void\ connectAdjacentNodes(Graph)
comment13.params=graph\ source\ destination
comment13.target=Node\ calculateShortestPathFromSource(Graph,\ Node,\ Node)
comment14.params=unsettledNodes
comment14.target=Node\ getLowestDistanceNode(java.util.Set)
comment15.params=evaluationNode\ edgeWeight\ sourceNode
comment15.target=void\ calculateMinimumDistance(Node,\ java.lang.Integer,\ Node)
comment16.params=map
comment16.target=void\ printMap(int[][])
comment2.params=n
comment2.target=void\ setActivePath(Node)
comment3.params=n
comment3.target=void\ printPath(Node)
comment4.params=g
comment4.target=void\ visualizeGraph(Graph)
comment5.params=g
comment5.target=Node\ findStart(Graph)
comment6.params=g
comment6.target=Node\ findEnd(Graph)
comment7.params=matrix
comment7.target=Graph\ matrixToGraph(int[][])
comment7.text=\r\n\ given\ a\ matrix,\ convert\ every\ point\ on\ the\ matrix\ to\ a\ node\ and\ assemble\ a\ graph\ out\ of\ it,\ and\ connect\ adjacent\ nodes.\r\n
comment8.params=g
comment8.target=void\ connectAdjacents(Graph)
comment9.params=g
comment9.target=Node[][]\ graphToNodeMatrix(Graph)
numComments=17
